#!/bin/bash

cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1
CONFIGPATH=$HOME/.config/laravel-deploy-bash
CACHEPATH=$HOME/.cache/laravel-deploy-bash

#Setting terminal output colors
red=`tput setaf 1`
#errorred=`tput setaf 196`
#validgreen=`tput setaf 82`
green=`tput setaf 46`
brown=`tput setaf 3`
blue=`tput setaf 4`
pink=`tput setaf 5`
cyan=`tput setaf 39`
gray=`tput setaf 7`
darkgray=`tput setaf 8`
lightred=`tput setaf 9`
lightgreen=`tput setaf 10`
yellow=`tput setaf 11`
reset=`tput sgr0`
# Colors
G='\e[01;32m'      # GREEN TEXT
R='\e[01;31m'      # RED TEXT
Y='\e[01;33m'      # YELLOW TEXT
B='\e[01;34m'      # BLUE TEXT
V='\e[01;35m'      # VIOLET TEXT
Bl='\e[01;30m'     # BLACK TEXT
C='\e[01;36m'      # CYAN TEXT
W='\e[01;37m'      # WHITE TEXT
BGBL='\e[1;30;47m' # Background W Text Bl
N='\e[0m'          # How to use (example): echo "${G}example${N}"
loadBar=' '        # Load UI

display_banner(){
        clear
        echo "${pink}"
	echo "Laravel Deploy"
        echo "${reset}"
}

#####################################################
initialize(){
        echo initalizing..
        mkdir -p $CONFIGPATH
        mkdir -p $CACHEPATH
	touch $CONFIGPATH/recipies
	touch $CONFIGPATH/servers
	echo "# DO NOT EDIT THIS FILE!!" > $CONFIGPATH/config
	echo "SERVERS=$CONFIGPATH/servers" >> $CONFIGPATH/config
	echo "RECIPIES=$CONFIGPATH/recipies" >> $CONFIGPATH/config
	echo 'source $SERVERS' >> $CONFIGPATH/config
	echo 'source $RECIPIES' >> $CONFIGPATH/config
	sleep 1
}
CONFIG=$CONFIGPATH/config
if [ ! -f $CONFIG ]
then
       display_banner &&  initialize
fi
source $CONFIG
######################################################

# Read the file in parameter and fill the array named "array"
#list_servers() {
 #   array=() # Create array
 #   while IFS= read -r line # Read a line
  #  do
   #     array+=("$line") # Append line to the array
    #done < "$1"
#}
get_serveros(){
	list_servers $SERVERS
	for e in "${array[@]}"
	do
		serveros=( $( ssh "$e" -t uname -a) )
		#ssh "$e" -t neofetch
	done
}

select_server(){
#	cat $SERVERS
	echo ""
	read -p "Select Server: " SELECT_SERVER
	list_servers $SERVERS
	for e in "${array[$SELECT_SERVER]}"
	do
		echo ${serveros[$SELECT_SERVER]}
		ssh "$e"
	done
}

list_servers(){
	echo =====================
	echo Servers
	echo ---------------------
	cat $SERVERS
	echo ---------------------
}
#######################################################################
add_new_server(){
items_add_new_server(){
	echo "Add New Server"
	echo ""
	echo "x - Go back"
	echo "Format 'user@hostname'"
}
read_add_new_server(){
	read -p "Enter new server: ${cyan}" NEW_SERVER
	USER=$(echo $NEW_SERVER | cut -f1 -d "@")
	HOST=$(echo $NEW_SERVER | cut --complement -d "@" -f 1)
	EXISTHOST=$(cat $SERVERS | grep -oE $HOST)
}
items_add_new_server
read_add_new_server

	#############################
	if [ "$NEW_SERVER" = "x" ] || [ "$NEW_SERVER" = "go back" ]
	then
		display_banner
		list_servers
		servers_menu
	elif [ "$(echo $NEW_SERVER | grep -oE @)" = "" ]
	then
		display_banner
		items_add_new_server
		echo ${red}ERROR Invalid format: ${reset} $NEW_SERVER
		read_add_new_server
	elif [ "$EXISTHOST" = "$HOST" ]
	then
		EXISTUSER=$(cat $SERVERS | grep $HOST | cut -f1 -d "@")
		display_banner
		items_add_new_server
		echo ${red}ERROR${reset} $HOST ${red}already exists as ${reset}$EXISTUSER@$EXISTHOST${red}!${reset}
		read_add_new_server
	fi
	##########################################
	########Check Connection#################
	display_banner
	echo "checking connection to $HOST..."
	PING=$(ping -c 1 $HOST 2> /dev/null | grep -oE 0%)
	if [ "$PING" != "0%" ]
	then
		display_banner
		items_add_new_server
		echo ${red} Unable to ping ${reset} $HOST
		read_add_new_server
	fi
	#########################################
	echo "Checking ssh access"
	CHECKSSH=$(ssh -v $NEW_SERVER -t exit 2>&1 | grep -oE Authenticated)
	if [ "$CHECKSSH" = "Authenticated"  ]
	then
		echo "Authentication Succfull"
		echo $NEW_SERVER >> $SERVERS
		echo ${green}$NEW_SERVER added! ${reset}
		sleep 5
		display_banner
		list_servers
		servers_menu
	else
		sleep 5
		echo ${red}Unable to authenticate${reset}
		read -p "See Logs? [Y/n] " SEE_LOG
		if  [ "$SEE_LOG" = "Y" ] || [ "$SEE_LOG" = "y" ] || [ "$SEE_LOG" = "" ]
		then
			echo ""
			ssh $NEW_SERVER -v
			echo ""
			read -p "Press Enter to continue" NULL
		fi
		display_banner
		list_servers
		servers_menu
	fi
}
#########################################################################
servers_menu(){
items_servers_menu(){
	echo ""
	echo "1 - Add New Server"
	echo "2 - SSH into Server"
	echo "3 - Delete Server"
	echo ""
	echo ========================
	echo "x - Go back"
}
read_servers_menu(){
	read -p "Please Input: ${cyan}" SERVERS_MENU
}
items_servers_menu
read_servers_menu
action_servers_menu(){
	if [ "$SERVERS_MENU" = "1" ] || [ "$SERVERS_MENU" = "add new server" ]
	then
		display_banner
		add_new_server
	elif [ "$SERVERS_MENU" = "2" ] || [ "$SERVERS_MENU" = "ssh into server" ]
	then
		display_banner
		list_servers
		ssh_into_serve
	elif [ "$SERVERS_MENU" = "3" ] || [ "$SERVERS_MENU" = "delete server" ]
	then
		display_banner
		list_servers
		delete_server
	elif [ "$SERVERS_MENU" = "x" ] || [ "$SERVERS_MENU" = "go back" ]
	then
		display_banner
		main_menu
	else
		display_banner
		items_servers_menu
		echo ${red}Invalid input:${yellow} $SERVERS_MENU ${reset} 1>&2
		read_servers_menu
		action_servers_menu
	fi
}
action_servers_menu
}
#########################################################################

##############################################################################
main_menu(){
items_main_menu(){
	echo ====================
	echo Main Menu
	echo -------------------
	echo ""
	echo "1 - Servers"
	echo "2 - Recent Events"
	echo "3 - Recipies"
	echo "4 - Applications"
	echo "5 - Settings"
	echo ""
	echo ====================
	echo "x - exit"
}
read_main_menu(){
	read -p "Please Input: ${cyan}" MAIN_MENU
}
items_main_menu
read_main_menu
action_main_menu(){
	if [ "$MAIN_MENU" = "1" ] || [ "$MAIN_MENU" = "servers" ]
	then
		display_banner
		list_servers
		servers_menu
	elif [ "$MAIN_MENU" = "2" ] || [ "$MAIN_MENU" = "recent events" ]
	then
		display_banner
		recent_events
	elif [ "$MAIN_MENU" = "3" ] || [ "$MAIN_MENU" = "recipies" ]
	then
		display_banner
		recipies_menu
	elif [ "$MAIN_MENU" = "4" ] || [ "$MAIN_MENU" = "applications" ]
	then
		display_banner
		applications_menu
	elif [ "$MAIN_MENU" = "5" ] || [ "$MAIN_MENU" = "settings" ]
	then
		display_banner
		settings_menu
	else
		display_banner
		items_main_menu
		echo ${red}Invalid input:${yellow} $MAIN_MENU ${reset} 1>&2
		read_main_menu
		action_main_menu
	fi
}
action_main_menu
}
################################################################################
source $CONFIG
display_banner && main_menu
